#!/usr/qc/env python
# pyapplet 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# See https://wiki.dnanexus.com/Developer-Portal for documentation and
# tutorials on how to modify this file.
#
# DNAnexus Python Bindings (dxpy) documentation:
#   http://autodoc.dnanexus.com/bindings/python/current/

import os

# see: http://stackoverflow.com/questions/27981545/suppress-insecurerequestwarning-unverified-https-request-is-being-made-in-pytho
import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning
#requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

import dxpy


"""Count number of reads mapped to each chromosome"""
import sys
import argparse
from collections import Counter


@dxpy.entry_point('main')
def main(viewsam):

    # The following line(s) initialize your data object inputs on the platform
    # into dxpy.DXDataObject instances that you can start using immediately.

    viewsam = dxpy.DXFile(viewsam)

    # The following line(s) download your file inputs to the local file system
    # using variable names for the filenames.

    dxpy.download_dxfile(viewsam.get_id(), "view.sam")





    # Fill in your application code here.
    ###########################################################################
    counter = Counter()

    # with open("chrom_counts.txt", 'w') as outfile, open("view.sam", 'r', encoding='utf-8') as infile:
    with open("chrom_counts.txt", 'w') as outfile, open("view.sam", 'r') as infile:

        for line in infile:
            line = line.strip().split()
            if line[0].startswith("@") or line[2] == "*":
                continue
            if len(line) < 10:
                raise TypeError("Not sam format")
            counter[line[2]] += 1

        for name, count in counter.most_common():
            outfile.write(name + " " + str(count) + '\n')
    ###########################################################################




    # The following line(s) use the Python bindings to upload your file outputs
    # after you have created them on the local file system.  It assumes that you
    # have used the output field name for the filename for each output, but you
    # can change that behavior to suit your needs.

    chrom_counts = dxpy.upload_local_file("chrom_counts.txt")

    # The following line fills in some basic dummy output and assumes
    # that you have created variables to represent your output with
    # the same name as your output fields.

    output = {}
    output["chrom_counts"] = dxpy.dxlink(chrom_counts)

    return output

dxpy.run()
